#!/usr/bin/python

import sys
import json
from optparse import OptionParser

def main(args):

    usage = "Usage: %s [options] [inputfile] [outputfile]" % args[0]

    parser = OptionParser(usage)
    parser.add_option('-p', '--pretty', dest='pretty', action="store_true", default=False, help="Pretty Print")
    parser.add_option('-i', '--indent', dest='indent', default=3, help="# of spaces to indent (requires -p)")
    parser.add_option('-s', '--sort', dest='sort', default=False, help="Sort object keys")

    (options, args) = parser.parse_args()

    try:
        if len(args) == 0:
            if options.pretty:
                print json.dumps(json.loads(sys.stdin.read()), indent=options.indent, sort_keys=options.sort)
            else:
                print json.dumps(json.loads(sys.stdin.read()), sort_keys=options.sort)
        elif len(args) == 1:
            inFile = open(args[0])
            inStr = inFile.read()
            jsonObj = json.loads(inStr)
            inFile.close()
            if options.pretty:
                print json.dumps(jsonObj, indent=options.indent, sort_keys=options.sort)
            else:
                print json.dumps(jsonObj, sort_keys=options.sort)
        elif len(args) == 2:
            inFile = open(args[0])
            inStr = inFile.read()
            jsonObj = json.loads(inStr)
            inFile.close()
            outFile = open(args[1], "w")
            if options.pretty:
                json.dump(jsonObj, outFile, indent=options.indent, sort_keys=options.sort)
            else:
                json.dump(jsonObj, outFile, sort_keys=options.sort)
            outFile.close()

    except IndexError, e:
        print e
        return False
        
    return True

def usage():
    print __doc__

if __name__ == "__main__":
    sys.exit(not main(sys.argv))
